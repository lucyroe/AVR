# Check this for proper formatting: https://packaging.python.org/en/latest/specifications/declaring-project-metadata/#declaring-project-metadata
[project]
name = "AffectiveVR"
version = "0.1.0"
description = "AffectiveVR explores continuous emotion ratings using videos in virtual reality."
readme = "README.md"
requires-python = ">=3.11"
license = { file = "LICENSE" }
authors = [
    { name = "Lucy Roellecke", email = "lucy.roellecke@tuta.com" },
]
maintainers = [
    { name = "Lucy Roellecke", email = "lucy.roellecke@tuta.com" },
]
keywords = ["emotion", "VR", "EEG", "circumplex model", "HMM", "continuous emotion ratings", "ECG"]
# Check for classifiers: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 1 - Planning",  # see: https://pypi.org/classifiers/
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]

# Similar to a requirements.txt file, fill in the dependencies your project requires
dependencies = [
    "ipykernel",
    "numpy",
    "pandas",
    "toml>=0.10; python_version < '3.11'",
    "matplotlib",
    "seaborn",
    "scipy",
    "scikit-learn",
    "statsmodels",
    "mne",
    "neurokit2",
    "json",
    "time",
    "pathlib",
    "pyxdf",
    "gzip",
    "sys",
    "systole",
    "autoreject",
    "fcwt",
    "foof",
    "IPython",
]

# Following can be co-installed with `pip install -e .[develop]`
[project.optional-dependencies]
develop = [
    "black[jupyter]>=23.11.0",
    "ruff>=0.1.6",
    "tox>=4.11.3",
    "pytest>=7.4.2",
    "pytest-cov>=4.1.0",
]

[project.urls]
documentation = "https://readthedocs.org"  # TODO: change to actual documentation
repository = "https://github.com/lucyroe/AVR"

# Entry points for the project
# For a command line interface (CLI) [uncomment and/or adopt the following if needed]
# [project.scripts]
# AVR = "AVR.main:main"

[tool.setuptools]
platforms = ["unix", "linux", "osx", "cygwin", "win32"]  # TODO: keep intended platforms
zip-safe = false

# To automatically find the package(s) (Beta feature (Oct, 2022)):
[tool.setuptools.packages.find]
where = ["code"]
include = ["AVR"]
exclude = ["tests", "notebooks", "configs"]

# Include non-python files in the package (uncomment if needed)
# [options.package_data]
# AVR = ["*.txt", "*.rst"]

# Exclude specific non-python files in the package (uncomment if needed)
# [tool.setuptools.exclude-package-data]
# AVR = [".gitattributes"]

# ALL ABOVE IS AN ADAPTATION OF THE FORMER setup.cfg
# ALL BELOW WAS ALREADY PART OF pyproject.toml [Oct, 2022]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
#addopts = "--cov=AVR"
testpaths = ["code/tests"]

[tool.mypy]
mypy_path = "code"
check_untyped_defs = true
disallow_any_generics = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
no_implicit_reexport = true

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html
data_file = "code/tests/.coverage"

[tool.coverage.report]
exclude_lines = ["if __name__ == .__main__.:"]

[tool.coverage.html]
directory = "code/tests/coverage_html_report"

[tool.ruff]
# Select rules / linters to apply
select = [   # add /comment-out rules (list below does not contain all rules)
    # "ALL",  # all rules
    "D",  # pydocstyle
    "E", # pycodestyle [default]
    "F",  # Pyflakes [default]
    "I",  # isort imports
    "RUF",  # ruff specific
    "UP",  # pyupgrade [default]
    "W",  # pycodestyle: warning
    "C90", # mccabe
    "N", # pep8-naming
    # "ANN", # flake8-annotations (toggle on if you intend to work with type annotations)
    "S", # flake8-bandit
    "BLE", # flake8-blind-except
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    # "EM", # flake8-errmsg
    # "FA", # flake8-future-annotations (see ANN above)
    "ISC", # flake8-implicit-str-concat
    # "ICN", # flake8-import-conventions
    "G", # flake8-logging-format
    "INP", # flake8-no-pep420
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "TD", # flake8-todos
    "FIX", # flake8-fixme
    "ERA", # eradicate
    "PD", # pandas-vet
    "PL", # Pylint
    "NPY", # NumPy-specific rules
]  # run `ruff linter` to see all rules; ; run e.g., `ruff rule ERA001` to see specs of specific rule

fix = false  # true: Ruff will try to fix certain errors automatically

# List of rules to consider non-autofix-able.
unfixable = [  # either with fix = true or when `ruff . --fix` is executed
    "ERA001",  # found commented-out code
    "F401",  # unused imports
    "RUF100",  # `noqa` directives that are no longer applicable
]

# Ignore specific rules (e.g., "ANN102") or the whole set of a rule (e.g., "ANN")
ignore = [
    "ANN101",  # flake8-annotations: Missing type annotation for self in method
    "ANN102",  # flake8-annotations: Missing type annotation for cls in classmethod
    "ANN401",  # flake8-annotations: Any
    "COM812",  # Trailing comma missing
    "D203",  # 1 blank line required before class docstring: incompatible with D211 (=no blank line required)
    "D212",   # multi-line-summary-first-line incompatible with D213 (=should start at second line)
    "DTZ005",  # timezone-naive datetime
    "E402",  # Module level import not at top of file (covert by ISORT)
    # "E501",  # Ignore line-length since we use 119
    # "ERA001",  # Found commented-out code
    "S301",  # suspicious-pickle-usage
    "TD002",  # Missing author in To-Do
    "TD003",  # Missing issue link on the line following a To-Do
]

ignore-init-module-imports = true  # void automatically removing unused imports in __init__.py
respect-gitignore = true  # files & folder ignored in gitignore are ignored by ruff as well [default: true]

src = ["code/AVR", "code/tests"]
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]

# Exclude a variety of commonly ignored directories:
extend-exclude = [
    "code/configs",
    "data",
    "literature",
    "organisation",
    "publications",
    "results",
]

line-length = 119 # Same as flake8 & black
target-version = "py311" # assume Python 3.11
# output-format = "grouped"  # default : "text"
# preview = true  # true: Ruff will use unstable rules and fixes; default: false

# Ignore specific rules in specific files
[tool.ruff.extend-per-file-ignores]
"__init__.py" = ["F401", "D104"]
"*.ipynb" = ["D100"]  # ignore docsstring in notebooks
"code/tests/*.py" = ["S101"]  # ignore assert statements in tests

# Configure specific linters
[tool.ruff.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true
suppress-none-returning = true

[tool.ruff.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.isort]
known-local-folder = ["code/AVR"]
# known-first-party = ...

[tool.ruff.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds x.
max-complexity = 10  # default x: 10

[tool.ruff.pep8-naming]
ignore-names = []  # fill with specific class, function, variable names

[tool.ruff.pydocstyle]
# convention = "google"  # "numpy", "pep257"

[tool.ruff.pylint]
max-args = 5  # default: 5
max-branches = 12  # default: 12
max-returns = 6  # default: 6
max-statements = 50  # default: 50
# allow-magic-value-types = ["int"]

[tool.black]
line-length = 119
target-version = ["py311"]
#src = ["code/AVR", "code/tests"]
include = '(\.pyi?|\.ipynb)$'
exclude = '''  # A regex preceded with ^/ will apply only to files and directories in the root of the project.
(
  ^/code/configs
  | ^/data
  | ^/literature
  | ^/organisation
  | ^/publications
  | ^/results
  | /*/\..*  # ignore (hidden) files in hidden directories
)
'''
# preview = true  # include unstable / upcoming black features
